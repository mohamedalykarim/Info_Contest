// Generated by Dagger (https://dagger.dev).
package mohalim.alarm.infocontest.core.di;

import android.app.Activity;
import android.app.Service;
import android.content.Context;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.hilt.work.HiltWorkerFactory;
import androidx.hilt.work.HiltWrapper_WorkerFactoryModule;
import androidx.hilt.work.WorkerAssistedFactory;
import androidx.hilt.work.WorkerFactoryModule_ProvideFactoryFactory;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import androidx.work.ListenableWorker;
import androidx.work.WorkerParameters;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_Lifecycle_Factory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import dagger.internal.SingleCheck;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;
import mohalim.alarm.infocontest.core.data_source.aws.AWSDatabase;
import mohalim.alarm.infocontest.core.data_source.room.AppCacheDatabase;
import mohalim.alarm.infocontest.core.data_source.room.QuestionDao;
import mohalim.alarm.infocontest.core.model.question.QuestionCacheMapper;
import mohalim.alarm.infocontest.core.service.RetreiveQuestionWorkManager;
import mohalim.alarm.infocontest.core.service.RetreiveQuestionWorkManager_AssistedFactory;
import mohalim.alarm.infocontest.ui.login.AdminActivity;
import mohalim.alarm.infocontest.ui.login.LoginViewModel;
import mohalim.alarm.infocontest.ui.login.LoginViewModel_HiltModules_KeyModule_ProvideFactory;
import mohalim.alarm.infocontest.ui.main.HomeViewModel;
import mohalim.alarm.infocontest.ui.main.HomeViewModel_HiltModules_KeyModule_ProvideFactory;
import mohalim.alarm.infocontest.ui.main.MainActivity;
import mohalim.alarm.infocontest.ui.quiz.QuizActivity;
import mohalim.alarm.infocontest.ui.quiz.QuizViewModel;
import mohalim.alarm.infocontest.ui.quiz.QuizViewModel_HiltModules_KeyModule_ProvideFactory;
import mohalim.alarm.infocontest.ui.splash.SplashActivity;
import mohalim.alarm.infocontest.ui.splash.SplashViewModel;
import mohalim.alarm.infocontest.ui.splash.SplashViewModel_HiltModules_KeyModule_ProvideFactory;
import mohalim.contest.alarm.core.di.modules.AppModule;
import mohalim.contest.alarm.core.di.modules.AppModule_ProvideAWSDatabaseFactory;
import mohalim.contest.alarm.core.di.modules.AppModule_ProvideQuestionCacheMapperFactory;
import mohalim.contest.alarm.core.di.modules.CahcheDatabaseModule;
import mohalim.contest.alarm.core.di.modules.CahcheDatabaseModule_ProvideAppDatabaseFactory;
import mohalim.contest.alarm.core.di.modules.CahcheDatabaseModule_ProvideQuestionDaoFactory;
import mohalim.contest.alarm.core.di.modules.RepositoryModule;
import mohalim.contest.alarm.core.di.modules.RepositoryModule_ProvideDatabaseRepositoryFactory;
import mohalim.contest.alarm.core.di.modules.RepositoryModule_ProvideQuestionRepositoryFactory;
import mohalim.contest.alarm.core.repository.DatabaseRepository;
import mohalim.contest.alarm.core.repository.QuestionRepositoryImp;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerMyApp_HiltComponents_SingletonC extends MyApp_HiltComponents.SingletonC {
  private final CahcheDatabaseModule cahcheDatabaseModule;

  private final ApplicationContextModule applicationContextModule;

  private final AppModule appModule;

  private final RepositoryModule repositoryModule;

  private final DaggerMyApp_HiltComponents_SingletonC singletonC = this;

  private Provider<AppCacheDatabase> provideAppDatabaseProvider;

  private Provider<QuestionDao> provideQuestionDaoProvider;

  private Provider<QuestionCacheMapper> provideQuestionCacheMapperProvider;

  private Provider<RetreiveQuestionWorkManager_AssistedFactory> retreiveQuestionWorkManager_AssistedFactoryProvider;

  private Provider<AWSDatabase> provideAWSDatabaseProvider;

  private Provider<DatabaseRepository> provideDatabaseRepositoryProvider;

  private Provider<QuestionRepositoryImp> provideQuestionRepositoryProvider;

  private DaggerMyApp_HiltComponents_SingletonC(AppModule appModuleParam,
      ApplicationContextModule applicationContextModuleParam,
      CahcheDatabaseModule cahcheDatabaseModuleParam, RepositoryModule repositoryModuleParam) {
    this.cahcheDatabaseModule = cahcheDatabaseModuleParam;
    this.applicationContextModule = applicationContextModuleParam;
    this.appModule = appModuleParam;
    this.repositoryModule = repositoryModuleParam;
    initialize(appModuleParam, applicationContextModuleParam, cahcheDatabaseModuleParam, repositoryModuleParam);

  }

  public static Builder builder() {
    return new Builder();
  }

  private RetreiveQuestionWorkManager retreiveQuestionWorkManager(Context appContext,
      WorkerParameters workerParameters) {
    return new RetreiveQuestionWorkManager(appContext, workerParameters, provideQuestionDaoProvider.get(), provideQuestionCacheMapperProvider.get());
  }

  private Map<String, Provider<WorkerAssistedFactory<? extends ListenableWorker>>> mapOfStringAndProviderOfWorkerAssistedFactoryOf(
      ) {
    return ImmutableMap.<String, Provider<WorkerAssistedFactory<? extends ListenableWorker>>>of("mohalim.alarm.infocontest.core.service.RetreiveQuestionWorkManager", (Provider) retreiveQuestionWorkManager_AssistedFactoryProvider);
  }

  private HiltWorkerFactory hiltWorkerFactory() {
    return WorkerFactoryModule_ProvideFactoryFactory.provideFactory(mapOfStringAndProviderOfWorkerAssistedFactoryOf());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final AppModule appModuleParam,
      final ApplicationContextModule applicationContextModuleParam,
      final CahcheDatabaseModule cahcheDatabaseModuleParam,
      final RepositoryModule repositoryModuleParam) {
    this.provideAppDatabaseProvider = DoubleCheck.provider(new SwitchingProvider<AppCacheDatabase>(singletonC, 2));
    this.provideQuestionDaoProvider = DoubleCheck.provider(new SwitchingProvider<QuestionDao>(singletonC, 1));
    this.provideQuestionCacheMapperProvider = DoubleCheck.provider(new SwitchingProvider<QuestionCacheMapper>(singletonC, 3));
    this.retreiveQuestionWorkManager_AssistedFactoryProvider = SingleCheck.provider(new SwitchingProvider<RetreiveQuestionWorkManager_AssistedFactory>(singletonC, 0));
    this.provideAWSDatabaseProvider = DoubleCheck.provider(new SwitchingProvider<AWSDatabase>(singletonC, 5));
    this.provideDatabaseRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<DatabaseRepository>(singletonC, 4));
    this.provideQuestionRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<QuestionRepositoryImp>(singletonC, 6));
  }

  @Override
  public ActivityRetainedComponentBuilder retainedComponentBuilder() {
    return new ActivityRetainedCBuilder(singletonC);
  }

  @Override
  public ServiceComponentBuilder serviceComponentBuilder() {
    return new ServiceCBuilder(singletonC);
  }

  @Override
  public void injectMyApp(MyApp myApp) {
    injectMyApp2(myApp);
  }

  private MyApp injectMyApp2(MyApp instance) {
    MyApp_MembersInjector.injectWorkerFactory(instance, hiltWorkerFactory());
    return instance;
  }

  public static final class Builder {
    private AppModule appModule;

    private ApplicationContextModule applicationContextModule;

    private CahcheDatabaseModule cahcheDatabaseModule;

    private RepositoryModule repositoryModule;

    private Builder() {
    }

    public Builder appModule(AppModule appModule) {
      this.appModule = Preconditions.checkNotNull(appModule);
      return this;
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    public Builder cahcheDatabaseModule(CahcheDatabaseModule cahcheDatabaseModule) {
      this.cahcheDatabaseModule = Preconditions.checkNotNull(cahcheDatabaseModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder hiltWrapper_WorkerFactoryModule(
        HiltWrapper_WorkerFactoryModule hiltWrapper_WorkerFactoryModule) {
      Preconditions.checkNotNull(hiltWrapper_WorkerFactoryModule);
      return this;
    }

    public Builder repositoryModule(RepositoryModule repositoryModule) {
      this.repositoryModule = Preconditions.checkNotNull(repositoryModule);
      return this;
    }

    public MyApp_HiltComponents.SingletonC build() {
      if (appModule == null) {
        this.appModule = new AppModule();
      }
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      if (cahcheDatabaseModule == null) {
        this.cahcheDatabaseModule = new CahcheDatabaseModule();
      }
      if (repositoryModule == null) {
        this.repositoryModule = new RepositoryModule();
      }
      return new DaggerMyApp_HiltComponents_SingletonC(appModule, applicationContextModule, cahcheDatabaseModule, repositoryModule);
    }
  }

  private static final class ActivityRetainedCBuilder implements MyApp_HiltComponents.ActivityRetainedC.Builder {
    private final DaggerMyApp_HiltComponents_SingletonC singletonC;

    private ActivityRetainedCBuilder(DaggerMyApp_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public MyApp_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl(singletonC);
    }
  }

  private static final class ActivityCBuilder implements MyApp_HiltComponents.ActivityC.Builder {
    private final DaggerMyApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private Activity activity;

    private ActivityCBuilder(DaggerMyApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ActivityCBuilder activity(Activity activity) {
      this.activity = Preconditions.checkNotNull(activity);
      return this;
    }

    @Override
    public MyApp_HiltComponents.ActivityC build() {
      Preconditions.checkBuilderRequirement(activity, Activity.class);
      return new ActivityCImpl(singletonC, activityRetainedCImpl, activity);
    }
  }

  private static final class FragmentCBuilder implements MyApp_HiltComponents.FragmentC.Builder {
    private final DaggerMyApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private Fragment fragment;

    private FragmentCBuilder(DaggerMyApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public FragmentCBuilder fragment(Fragment fragment) {
      this.fragment = Preconditions.checkNotNull(fragment);
      return this;
    }

    @Override
    public MyApp_HiltComponents.FragmentC build() {
      Preconditions.checkBuilderRequirement(fragment, Fragment.class);
      return new FragmentCImpl(singletonC, activityRetainedCImpl, activityCImpl, fragment);
    }
  }

  private static final class ViewWithFragmentCBuilder implements MyApp_HiltComponents.ViewWithFragmentC.Builder {
    private final DaggerMyApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private View view;

    private ViewWithFragmentCBuilder(DaggerMyApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;
    }

    @Override
    public ViewWithFragmentCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public MyApp_HiltComponents.ViewWithFragmentC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewWithFragmentCImpl(singletonC, activityRetainedCImpl, activityCImpl, fragmentCImpl, view);
    }
  }

  private static final class ViewCBuilder implements MyApp_HiltComponents.ViewC.Builder {
    private final DaggerMyApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private View view;

    private ViewCBuilder(DaggerMyApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public ViewCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public MyApp_HiltComponents.ViewC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewCImpl(singletonC, activityRetainedCImpl, activityCImpl, view);
    }
  }

  private static final class ViewModelCBuilder implements MyApp_HiltComponents.ViewModelC.Builder {
    private final DaggerMyApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private SavedStateHandle savedStateHandle;

    private ViewModelCBuilder(DaggerMyApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
      this.savedStateHandle = Preconditions.checkNotNull(handle);
      return this;
    }

    @Override
    public MyApp_HiltComponents.ViewModelC build() {
      Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
      return new ViewModelCImpl(singletonC, activityRetainedCImpl, savedStateHandle);
    }
  }

  private static final class ServiceCBuilder implements MyApp_HiltComponents.ServiceC.Builder {
    private final DaggerMyApp_HiltComponents_SingletonC singletonC;

    private Service service;

    private ServiceCBuilder(DaggerMyApp_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public MyApp_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonC, service);
    }
  }

  private static final class ViewWithFragmentCImpl extends MyApp_HiltComponents.ViewWithFragmentC {
    private final DaggerMyApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private final ViewWithFragmentCImpl viewWithFragmentCImpl = this;

    private ViewWithFragmentCImpl(DaggerMyApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl, View viewParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;


    }
  }

  private static final class FragmentCImpl extends MyApp_HiltComponents.FragmentC {
    private final DaggerMyApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl = this;

    private FragmentCImpl(DaggerMyApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        Fragment fragmentParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return activityCImpl.getHiltInternalFactoryFactory();
    }

    @Override
    public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
      return new ViewWithFragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl, fragmentCImpl);
    }
  }

  private static final class ViewCImpl extends MyApp_HiltComponents.ViewC {
    private final DaggerMyApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final ViewCImpl viewCImpl = this;

    private ViewCImpl(DaggerMyApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl, View viewParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }
  }

  private static final class ActivityCImpl extends MyApp_HiltComponents.ActivityC {
    private final DaggerMyApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl = this;

    private ActivityCImpl(DaggerMyApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, Activity activityParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;


    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), getViewModelKeys(), new ViewModelCBuilder(singletonC, activityRetainedCImpl));
    }

    @Override
    public Set<String> getViewModelKeys() {
      return ImmutableSet.<String>of(HomeViewModel_HiltModules_KeyModule_ProvideFactory.provide(), LoginViewModel_HiltModules_KeyModule_ProvideFactory.provide(), QuizViewModel_HiltModules_KeyModule_ProvideFactory.provide(), SplashViewModel_HiltModules_KeyModule_ProvideFactory.provide());
    }

    @Override
    public ViewModelComponentBuilder getViewModelComponentBuilder() {
      return new ViewModelCBuilder(singletonC, activityRetainedCImpl);
    }

    @Override
    public FragmentComponentBuilder fragmentComponentBuilder() {
      return new FragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public ViewComponentBuilder viewComponentBuilder() {
      return new ViewCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public void injectAdminActivity(AdminActivity adminActivity) {
    }

    @Override
    public void injectMainActivity(MainActivity mainActivity) {
    }

    @Override
    public void injectQuizActivity(QuizActivity quizActivity) {
    }

    @Override
    public void injectSplashActivity(SplashActivity splashActivity) {
    }
  }

  private static final class ViewModelCImpl extends MyApp_HiltComponents.ViewModelC {
    private final DaggerMyApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ViewModelCImpl viewModelCImpl = this;

    private Provider<HomeViewModel> homeViewModelProvider;

    private Provider<LoginViewModel> loginViewModelProvider;

    private Provider<QuizViewModel> quizViewModelProvider;

    private Provider<SplashViewModel> splashViewModelProvider;

    private ViewModelCImpl(DaggerMyApp_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, SavedStateHandle savedStateHandleParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;

      initialize(savedStateHandleParam);

    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavedStateHandle savedStateHandleParam) {
      this.homeViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 0);
      this.loginViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 1);
      this.quizViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 2);
      this.splashViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 3);
    }

    @Override
    public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
      return ImmutableMap.<String, Provider<ViewModel>>of("mohalim.alarm.infocontest.ui.main.HomeViewModel", (Provider) homeViewModelProvider, "mohalim.alarm.infocontest.ui.login.LoginViewModel", (Provider) loginViewModelProvider, "mohalim.alarm.infocontest.ui.quiz.QuizViewModel", (Provider) quizViewModelProvider, "mohalim.alarm.infocontest.ui.splash.SplashViewModel", (Provider) splashViewModelProvider);
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final DaggerMyApp_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ViewModelCImpl viewModelCImpl;

      private final int id;

      SwitchingProvider(DaggerMyApp_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, ViewModelCImpl viewModelCImpl, int id) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.viewModelCImpl = viewModelCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // mohalim.alarm.infocontest.ui.main.HomeViewModel 
          return (T) new HomeViewModel();

          case 1: // mohalim.alarm.infocontest.ui.login.LoginViewModel 
          return (T) new LoginViewModel(singletonC.provideDatabaseRepositoryProvider.get());

          case 2: // mohalim.alarm.infocontest.ui.quiz.QuizViewModel 
          return (T) new QuizViewModel(singletonC.provideQuestionRepositoryProvider.get());

          case 3: // mohalim.alarm.infocontest.ui.splash.SplashViewModel 
          return (T) new SplashViewModel();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ActivityRetainedCImpl extends MyApp_HiltComponents.ActivityRetainedC {
    private final DaggerMyApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    @SuppressWarnings("rawtypes")
    private Provider lifecycleProvider;

    private ActivityRetainedCImpl(DaggerMyApp_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;

      initialize();

    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.lifecycleProvider = DoubleCheck.provider(new SwitchingProvider<Object>(singletonC, activityRetainedCImpl, 0));
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonC, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return (ActivityRetainedLifecycle) lifecycleProvider.get();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final DaggerMyApp_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final int id;

      SwitchingProvider(DaggerMyApp_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, int id) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // dagger.hilt.android.internal.managers.ActivityRetainedComponentManager.Lifecycle 
          return (T) ActivityRetainedComponentManager_Lifecycle_Factory.newInstance();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ServiceCImpl extends MyApp_HiltComponents.ServiceC {
    private final DaggerMyApp_HiltComponents_SingletonC singletonC;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(DaggerMyApp_HiltComponents_SingletonC singletonC, Service serviceParam) {
      this.singletonC = singletonC;


    }
  }

  private static final class SwitchingProvider<T> implements Provider<T> {
    private final DaggerMyApp_HiltComponents_SingletonC singletonC;

    private final int id;

    SwitchingProvider(DaggerMyApp_HiltComponents_SingletonC singletonC, int id) {
      this.singletonC = singletonC;
      this.id = id;
    }

    @SuppressWarnings("unchecked")
    @Override
    public T get() {
      switch (id) {
        case 0: // mohalim.alarm.infocontest.core.service.RetreiveQuestionWorkManager_AssistedFactory 
        return (T) new RetreiveQuestionWorkManager_AssistedFactory() {
          @Override
          public RetreiveQuestionWorkManager create(Context appContext,
              WorkerParameters workerParameters) {
            return singletonC.retreiveQuestionWorkManager(appContext, workerParameters);
          }
        };

        case 1: // mohalim.alarm.infocontest.core.data_source.room.QuestionDao 
        return (T) CahcheDatabaseModule_ProvideQuestionDaoFactory.provideQuestionDao(singletonC.cahcheDatabaseModule, singletonC.provideAppDatabaseProvider.get());

        case 2: // mohalim.alarm.infocontest.core.data_source.room.AppCacheDatabase 
        return (T) CahcheDatabaseModule_ProvideAppDatabaseFactory.provideAppDatabase(singletonC.cahcheDatabaseModule, ApplicationContextModule_ProvideContextFactory.provideContext(singletonC.applicationContextModule));

        case 3: // mohalim.alarm.infocontest.core.model.question.QuestionCacheMapper 
        return (T) AppModule_ProvideQuestionCacheMapperFactory.provideQuestionCacheMapper(singletonC.appModule);

        case 4: // mohalim.contest.alarm.core.repository.DatabaseRepository 
        return (T) RepositoryModule_ProvideDatabaseRepositoryFactory.provideDatabaseRepository(singletonC.repositoryModule, singletonC.provideAWSDatabaseProvider.get());

        case 5: // mohalim.alarm.infocontest.core.data_source.aws.AWSDatabase 
        return (T) AppModule_ProvideAWSDatabaseFactory.provideAWSDatabase(singletonC.appModule);

        case 6: // mohalim.contest.alarm.core.repository.QuestionRepositoryImp 
        return (T) RepositoryModule_ProvideQuestionRepositoryFactory.provideQuestionRepository(singletonC.repositoryModule, singletonC.provideQuestionDaoProvider.get(), singletonC.provideQuestionCacheMapperProvider.get());

        default: throw new AssertionError(id);
      }
    }
  }
}
