// Generated by Dagger (https://dagger.dev).
package mohalim.contest.alarm.core.di.modules;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import mohalim.alarm.infocontest.core.data_source.room.QuestionDao;
import mohalim.alarm.infocontest.core.model.question.QuestionCacheMapper;
import mohalim.contest.alarm.core.repository.QuestionRepositoryImp;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RepositoryModule_ProvideQuestionRepositoryFactory implements Factory<QuestionRepositoryImp> {
  private final RepositoryModule module;

  private final Provider<QuestionDao> questionDaoProvider;

  private final Provider<QuestionCacheMapper> questionCacheMapperProvider;

  public RepositoryModule_ProvideQuestionRepositoryFactory(RepositoryModule module,
      Provider<QuestionDao> questionDaoProvider,
      Provider<QuestionCacheMapper> questionCacheMapperProvider) {
    this.module = module;
    this.questionDaoProvider = questionDaoProvider;
    this.questionCacheMapperProvider = questionCacheMapperProvider;
  }

  @Override
  public QuestionRepositoryImp get() {
    return provideQuestionRepository(module, questionDaoProvider.get(), questionCacheMapperProvider.get());
  }

  public static RepositoryModule_ProvideQuestionRepositoryFactory create(RepositoryModule module,
      Provider<QuestionDao> questionDaoProvider,
      Provider<QuestionCacheMapper> questionCacheMapperProvider) {
    return new RepositoryModule_ProvideQuestionRepositoryFactory(module, questionDaoProvider, questionCacheMapperProvider);
  }

  public static QuestionRepositoryImp provideQuestionRepository(RepositoryModule instance,
      QuestionDao questionDao, QuestionCacheMapper questionCacheMapper) {
    return Preconditions.checkNotNullFromProvides(instance.provideQuestionRepository(questionDao, questionCacheMapper));
  }
}
